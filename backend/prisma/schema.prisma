// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  username      String?  @unique
  googleId      String?  @unique @map("google_id")
  password      String?  @map("password")
  name          String
  profilePicture String? @map("profile_picture")
  role          UserRole @default(USER)
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  transactions  Transaction[]
  categories    Category[]
  budgets       Budget[]
  accounts      Account[]
  notifications Notification[]

  @@map("users")
}

model Category {
  id               String   @id @default(uuid())
  userId           String?  @map("user_id")
  name             String
  type             CategoryType
  icon             String?
  color            String?
  parentCategoryId String?  @map("parent_category_id")
  isSystem         Boolean  @default(false) @map("is_system")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user             User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentCategory   Category?     @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  subCategories    Category[]    @relation("CategoryHierarchy")
  transactions     Transaction[]
  budgets          Budget[]

  @@unique([name, type])
  @@map("categories")
}

model Transaction {
  id                String            @id @default(uuid())
  userId            String            @map("user_id")
  amount            Decimal           @db.Decimal(10, 2)
  type              TransactionType
  categoryId        String            @map("category_id")
  accountId         String?            @map("account_id")
  toAccountId       String?           @map("to_account_id")
  date              DateTime
  description       String?
  paymentMethodId   String?           @map("payment_method_id")
  isRecurring       Boolean           @default(false) @map("is_recurring")
  recurringFrequency RecurringFrequency? @map("recurring_frequency")
  isOpeningBalance  Boolean           @default(false) @map("is_opening_balance")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  // Relations
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  category          Category          @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  account           Account?          @relation(fields: [accountId], references: [id], onDelete: SetNull)
  toAccount         Account?          @relation("TransferToAccount", fields: [toAccountId], references: [id], onDelete: SetNull)
  paymentMethod     PaymentMethod?    @relation(fields: [paymentMethodId], references: [id], onDelete: SetNull)

  @@map("transactions")
}

model Budget {
  id              String      @id @default(uuid())
  userId          String      @map("user_id")
  categoryId      String      @map("category_id")
  amount          Decimal     @db.Decimal(10, 2)
  periodType      PeriodType  @map("period_type")
  startDate       DateTime    @map("start_date")
  endDate         DateTime    @map("end_date")
  alertThreshold  Int         @default(80) @map("alert_threshold")
  allowRollover   Boolean     @default(false) @map("allow_rollover")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  category        Category    @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  alerts          BudgetAlert[]

  @@map("budgets")
}

model BudgetAlert {
  id                String   @id @default(uuid())
  budgetId          String   @map("budget_id")
  thresholdPercentage Int    @map("threshold_percentage")
  triggeredAt       DateTime @map("triggered_at")
  isAcknowledged    Boolean  @default(false) @map("is_acknowledged")

  // Relations
  budget            Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  @@map("budget_alerts")
}

model Account {
  id            String      @id @default(uuid())
  userId        String      @map("user_id")
  name          String
  type          AccountType
  balance       Decimal     @db.Decimal(10, 2) @default(0)
  currency      String      @default("USD")
  isActive      Boolean     @default(true) @map("is_active")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  toTransactions Transaction[] @relation("TransferToAccount")

  @@map("accounts")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum CategoryType {
  INCOME
  EXPENSE
}

enum TransactionType {
  INCOME
  EXPENSE
  OPENING_BALANCE
  TRANSFER
}

model PaymentMethod {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  transactions Transaction[]

  @@map("payment_methods")
}

enum RecurringFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum PeriodType {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  CASH
  INVESTMENT
  LOAN
  OTHER
}

enum NotificationType {
  SUCCESS
  ERROR
  WARNING
  INFO
}

model Notification {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  title       String
  message     String
  type        NotificationType
  isRead      Boolean  @default(false) @map("is_read")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
